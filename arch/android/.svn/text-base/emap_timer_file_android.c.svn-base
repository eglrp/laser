/** file: emap_timer_file_android.c
 * modified: vmlinz
 * email: vmlinz@gmail.com
 * date:20100521
 * ANDROID_OS
 */
#ifdef ANDROID_OS

#include <arch/emap_plat_base.h>
#include <arch/emap_timer_api.h>

#include <unistd.h>
#include <time.h>
#include <string.h>
#include <errno.h>

/** time structure convert util
 * util func to convert posix tm structure to ems time structure
 * there may be bugs before testing
 */

static void
posixtm2emstm(struct tm *posix_tm, system_time_t *emap_tm)
{
	emap_tm->year = (e_uint16)(posix_tm->tm_year + 1900);
	emap_tm->month = (e_uint16)(posix_tm->tm_mon);
	emap_tm->dayofweek = (e_uint16)(posix_tm->tm_wday);
	emap_tm->day = (e_uint16)(posix_tm->tm_mday);
	emap_tm->hour = (e_uint16)(posix_tm->tm_hour);
	emap_tm->minute = (e_uint16)(posix_tm->tm_min);
	emap_tm->second = (e_uint16)(posix_tm->tm_sec);
	emap_tm->mmseconds = 0;
}

/** Emap_GetSysTime
 * get system time
 */
void
Emap_GetSysTime( system_time_t *sys_time )
{
	struct tm *sys_time_tm;
	time_t sys_time_sec;
	time(&sys_time_sec);
	sys_time_tm = gmtime(&sys_time_sec);
	if(sys_time_tm == 0x0)
		return;

	posixtm2emstm(sys_time_tm, sys_time);
}

/** Emap_GetLocalTime
 * get system local time
 */
void
Emap_GetLocalTime( system_time_t *sys_time )
{
	struct tm *sys_time_tm;
	time_t sys_time_sec;
	time(&sys_time_sec);
	sys_time_tm = localtime(&sys_time_sec);
	if(sys_time_tm == 0x0)
		return;

	posixtm2emstm(sys_time_tm, sys_time);
}


/** Emap_GetTickCount
 * colock counts since boot up
 */
e_uint32
Emap_GetTickCount()
{
	return (e_uint32)clock();
}

/** Emap_Delay
 * sleep for delay_val ms
 */
void
Emap_Delay(e_int32 ms)
{
	int was_error;
	struct timespec elapsed, tv;
	elapsed.tv_sec = ms / 1000;
	elapsed.tv_nsec = (ms % 1000) * 1000000;

	/* sleep tv time despite of interrupting signal */
	do{
		errno = 0;
		tv.tv_sec = elapsed.tv_sec;
		tv.tv_nsec = elapsed.tv_nsec;
		was_error = nanosleep(&tv, &elapsed);
	}while(was_error && (errno == EINTR));
}


#endif	/* ANDROID_OS */
